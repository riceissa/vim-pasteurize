*pasteurize.txt* Common User Access cut, copy, and paste

*pasteurize* *pasteurize.vim*

Introduction                                    |pasteurize-intro|
Pasting and surrounding quote marks             |pasteurize-quote-marks|
Secure pasting                                  |pasteurize-security|
Mappings                                        |pasteurize-mappings|
Settings                                        |pasteurize-settings|
License                                         |pasteurize-license|

INTRODUCTION                                    *pasteurize-intro*

This plugin provides Common User Access (CUA) mappings for cut, copy, and
paste.  It is in the spirit of |mswin.vim| but clobbers fewer keybindings.

Vim's default *quoteplus* register for accessing the system clipboard is
somewhat tedious, and there have been various approaches to make access easier:

  * CUA keybindings with, e.g. |mswin.vim|
  * |clipboard-unnamedplus| to make |quoteplus| the default register for yank,
    delete, change, and put commands
  * Various |<Leader>| mappings
  * |i_CTRL-R| followed by + (only works in insert mode, and doesn't solve
    copying)
  * Solutions that insert system clipboard contents one character at a time,
    such as using Ctrl-Shift-v (perhaps with 'paste' enabled, as with
    |unimpaired|'s |yo| and |yO|)
  * System Copy: https://github.com/christoomey/vim-system-copy

This plugin is in this reference class, and makes use of the prefix "g" as a
way to make access easier.

Vim's |quoteplus| register, which stores the contents of the system clipboard,
is somewhat tedious to access by default. As a result there have been various
approaches to make access easier:

PASTING AND SURROUNDING QUOTE MARKS             *pasteurize-quote-marks*

In addition, this plugin always uses characterwise paste when pasting from the
system clipboard. This is to avoid accidentally misplacing the pasted text.

First, set the |"a| register: >
    :let @a = "some text\n"
<

Alternatively, you can set the value of the register by calling |setreg()|: >
    :call setreg("a", "some text", "l")
<

For instance, consider the following: >

    "^"

where ^ indicates the cursor position. Suppose the user is in insert mode, and
the intent is to paste the text between the quotes. If the text was pasted
using linewise paste CTRL-R CTRL-O a, one would obtain >

    some text
    ^""

instead of the intended >

    "some text
    ^"

With normal mode paste "aP, you would obtain >
    ^some text
    ""
<

The issue, of course, is that Vim treats the register as being |linewise|, so
it creates a new line above the current one and puts the register contents
there. This is completely fine when working within Vim, because yanking and
pasting are both aware of the characterwise versus linewise distinction.
However, when pasting from outside of Vim, there is usually no concept of
linewise mode.


SECURE PASTING                                  *pasteurize-security*

This section describes what secure pasting is.

This plugin protects against certain attempts at "clipboard hijacking" in the
terminal by never interpreting special terminal escapes. Clipboard hijacking
is an attack where a webpage fools the user into copying something they didn't
intend to copy. In the terminal, this can be especially dangerous since
pasting can result in arbitrary commands being run.

A demo of terminal clipboard hijacking created by Jann Horn can be found here:
https://thejh.net/misc/website-terminal-copy-paste

See also: http://vim.wikia.com/wiki/Pasting_registers?useskin=monobook

Clipboard hijacking has also been called "what you see is not what you copy"
(abbreviated "WYSINWYC").




MAPPINGS                                        *pasteurize-mappings*

                                                *pasteurize-CTRL-C*
CTRL-C                  Copy (yank) the visual selection into the clipboard
                        (|quoteplus|).

                                                *pasteurize-CTRL-X*
CTRL-X                  Cut the visual selection into the clipboard
                        (|quoteplus|).

                                                *pasteurize-CTRL-V*
CTRL-V                  Paste the contents of the clipboard (|quoteplus|).
                        There are mappings for normal mode, insert mode,
                        visual mode, and command-line mode.  The contents of
                        the clipboard are never interpreted when pasting.

SETTINGS                                        *pasteurize-settings*

By default, this plugin strips leading and trailing newlines when copying or
pasting.  This can be disabled with:
>
        let g:pasteurize_no_strip_newlines = 1
<

By default, mappings for CTRL-C, CTRL-X, and CTRL-V are enabled.  To prevent
this (so that mappings can be defined manually), do:
>
        let g:pasteurize_no_mappings = 1
<

LICENSE                                         *pasteurize-license*

Same terms as Vim itself (see |license|).

 vim:tw=78:et:ts=8:ft=help:norl:
